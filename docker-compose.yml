version: '3'

services:
  elasticsearch:
    build: ./elasticsearch/
    container_name: elasticsearch
    environment:
      - node.name=elasticsearch
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
    volumes:
      - elasticstack:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
      - 9300:9300
    networks:
      - elasticstack
    restart: always

  kibana:
    build: ./kibana/
    container_name: kibana
    volumes:
      - ./kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml
    ports:
      - 5601:5601
    depends_on: 
      - elasticsearch
    networks:
      - elasticstack
    restart: always

  logstash:
    build: ./logstash/
    container_name: logstash
    volumes:
      - ./logstash/pipeline/:/usr/share/logstash/pipeline/
      - ./logstash/config/:/usr/share/logstash/config/
    ports:
      - 5000:5000
    depends_on:
      - kibana
    networks:
      - elasticstack
    restart: always

  mysql:
    build: ./mysql/
    container_name: mysql
    platform: linux/x86_64
    tty: true
    ports:
      - 3306:3306
    volumes:
      - ./mysql/initdb.d:/docker-entrypoint-initdb.d
      - ./mysql/db:/var/lib/mysql
    networks:
      - elasticstack
    restart: always
  
  phpmyadmin:
    container_name: phpmyadmin
    image: phpmyadmin/phpmyadmin
    depends_on:
      - mysql
    environment:
      - PMA_ARBITRARY=1
      - PMA_HOSTS='db'
    ports:
      - "3000:80"
    volumes:
      - ./docker/phpmyadmin/sessions:/sessions
    networks:
      - elasticstack
    restart: always

volumes:
  elasticstack:
    external: true
  mysql-data:
    name: mysql-volume

networks:
  elasticstack:
    external: true